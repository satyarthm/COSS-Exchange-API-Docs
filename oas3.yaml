openapi: 3.0.0
info:
  description:
  version: '1.2'
  title: COSS Public API for Trading
  termsOfService: 'https://coss.io'
  contact:
    email: support@coss.io
  license:
    name: coss
    url: 'https://coss.io'
tags:
  - name: Account
    description: >-
      Everything about your account and wallets. Currently user can retrieve the
      account balances and account details. Account details to be enriched with
      more information  in future release which will provide information like
      daily trading limits, KYC status etc.
  - name: Exchange information
    description: 'Buy ,Sell, and trading rules information for active (non frozen) symbols.'
  - name: Market
    description: 'Information related to market depth, market price, and  market summaries.'
  - name: Order management
    description: 'Everything about your order management and statuses.'
  - name: Server information
    description: 'Check server status and server time.'
  - name: Changelog
    description: 'Check out the latest API developments here.'
paths:
  /:
    get:
      summary: COSS Public API
      description: >-
              Welcome to the [COSS.io](https://coss.io) public trading API for [registered users](https://www.coss.io/c/accounts/register).
              [COSS.io](https://coss.io) prides itself on being one of the few exchanges in the crypto-verse that offers **0% maker fees** by default, with additional **negative maker fee tiers available**. [COSS.io](https://coss.io) - be paid to trade with the best fees in crypto.
              
              
              [**Read more about COSS.io's fee structure here**](https://medium.com/coss-official/introducing-the-best-trading-fees-in-crypto-777ddd0ce9c8?latest).
              
              
              <h2>Examples and Getting Started</h2>
              
              
              You can generate your API keys under the [Services section](https://www.coss.io/c/accounts/api) of your [COSS.io](https://coss.io) account.
              
              
              Many API requests will require user signing. This consists of [Public Key Authorization and Private Key Authorization](https://api.coss.io/v1/spec-api#section/Authentication).
              
              
              For API requests requiring **public key authorization**, your request *must* include your API Public Key (as a string) in the `Authorization` header.
              
              
              For API requests requiring **private key authorization**, your request *must* include your HMAC256-encrypted API Private Key in the `Signature` header of your request.
              
              
              Many API requests additionally require an **integer timestamp** to be submitted within your API request header under **timestamp**.
              
              
              Some API requests (such as [placing orders](https://api.coss.io/v1/spec-api#tag/Order-management/paths/~1order~1add~1%20(HMAC%20SHA256)/post)) require `both` request headers.
              
              
              The [COSS.io](https://coss.io) API is split into four URLs which have different API routes associated with them. These are:
              
              <ul>
                  <li>https://trade.coss.io/c/api/v1</li>
                  <li>https://exchange.coss.io/api</li>
                  <li>https://engine.coss.io/api/v1</li>
                  <li>https://www.coss.io/c/</li>
              </ul>
              
              
              There are also **websocket URLs** available for websocket-based trading.
              
              <h4>Trade feed websocket</h4>
              
              
              Note that {symbol} can be replaced with any valid trading symbol (for example, BTC_USDT).
              
              
              <ul><li>wss://engine.coss.io/ws/v1/ht/{symbol}</li></ul>
              
              
              <h4>Order book depth websocket</h4>
              
              
              <ul><li>wss://engine.coss.io/ws/v1/dp/{symbol}</li></ul>
              
              
              <h2>Example Requests Using Python</h2>
              
              
              <h3>Setting up your API Keys to handle requests</h3>
              

              ```python
              
              public_api_key = "your public key"
              
              private_api_key = bytearray("your private key", encoding="utf8")
              
              
              order_headers = {
                  "Content-Type": "application/json",
                  "X-Requested-With": "XMLHttpRequest",
                  "Authorization": public_api_key,
                  "Signature": None,
              }
              
              ```
              
              <h3>Getting your account balances [Public Key, Private Key, Timestamp]</h3>
              
              
              ```python
              
              import hashlib
              
              import hmac
              
              import json
              
              import time
              
              from urllib.parse import urlencode
              
              import requests
            
              # Many requests require the current timestamp!
              
              timestamp = urlencode({"timestamp": int(time.time() * 1000)})
              
              
              # Encrypting your private key set above along with the current time
              
              encrypted_private_key_and_timestamp = hmac.new(
                  private_api_key, timestamp.encode("utf-8"), hashlib.sha256
              ).hexdigest()
              
              
              # Signing your API request
              
              order_headers["Signature"] = encrypted_private_key_and_timestamp
              
              
              # Sending the request to the API!
              
              my_balances = requests.get(
              "https://trade.coss.io/c/api/v1/account/balances",
                  headers=order_headers,
                  params=timestamp,
              ).json()
              
              
              print(my_balances)  # JSON array of your account balances

              ```
              
              <h3>Getting an order book [No Auth Required]</h3>
              
              
              ```python
              
              import requests
              
              
              coss_engine_url = "https://engine.coss.io/api/v1"
              
              btc_usdt_order_book = requests.get(coss_engine_url + "/dp?symbol=BTC_USDT")
              
              eth_btc_order_book = requests.get(coss_engine_url + "/dp?symbol=ETH_BTC")
              
              ````
            
            
              <h2>Additional Example Code</h2>
              
              
              Example code for all requests is provided within the documentation for each API route.
              
               
              Please refer to [community trading wrappers](https://github.com/coss-exchange) for sample code.
              
              <h2>Help</h2>
              
              
              <p><b>If you create a request which requires more cryptocurrency than you currently have, or provide an incorrect signature,
              the API may return you an HTML document instead of a formal error message.</b></p>
              
              
              <p>If you have questions about COSS.io or this documentation, find us on Telegram in the <a href="https://web.telegram.org/#/im?p=@myCOSS">General Discussion Group</a> and
              the <a href="https://t.me/COSSAPI">API and Bot Development Groups</a>.</p>
               
              <h2>Official API Wrappers</h2>
              
              
              [Official Examples](https://github.com/coss-exchange).
               
              [CCXT (CryptoCurrency eXchange Trading Library)](https://github.com/ccxt/ccxt).
               
              <h2>Community API Wrappers</h2>
              
              
              [Node.js](https://github.com/Spielley/trading-api-wrapper-node-js)
              
              
              [Python](https://github.com/Shdjfjsks/pyCOSS)
              
              
              [C#](https://github.com/merklegroot/CossSharp)
              
              
              <h2>Community Trading Bots</h2>
              
              
              If you would like to run a bot on COSS.io out of the box, check out our community trading bots below.
              
              
              [Gimmer Bot (plug and play)](https://blog.gimmer.net/2019/10/31/coss-welcomes-the-gimmer-bot-community/)
              
              
              [COSS Market Making Bot](https://github.com/cyrus1996/CossMMBot)
              
              
              [COSS Reverse DCA Bot](https://github.com/Br0ke138/coss-reverse-dca)
              
              
              [Average-down Bot](https://github.com/Spielley/trading-api-wrapper-node-js)
              
      responses:
        '200':
          description: COSS public API for registered traders
        '500':
          description: COSS public API not available
  /changelog:
    get:
      summary: Latest API developments
      description: >-
      
       <h1>API news</h1>
       
        <ul>
          <li> 
            <strong><u>January, 16 2019</u></strong> : Document update for <strong>rate limits and order cancellation limits</strong> information
              <ul>
               <li> The api <strong>https://trade.coss.io/c/api/v1/exchange-info</strong> rate_limits contains objects related to the exchange’s REQUESTS rate limits. <br/><br/>  
              </li>
               <li> A 429 will be returned when rate limit is violated.  <br/><br/>  
              </li>
              <li>
                  Your account may get <strong>blocked when you place and cancel orders too frequently </strong>as explained below:
               <br/><br/>
               <font color="red"><strong>
               The frequency of your order placement and cancellation was too high. If you placed and cancelled an order within 10 seconds then it is counted as a violation. Five continuous violations would result your account being blocked.   </strong></font> <br/><br/>
              <strong> First occurrence</strong>: Your transactions will be blocked for 5 minutes.<br>
               <strong>Second occurrence</strong>: You will be blocked for 1 hour.<br>
               <strong>Third occurrence</strong>: Your account will be locked for 24 hours.<br/>
               <strong>Fourth occurrence</strong>: Your account will be locked for a longer duration. You may need to contact support to unlock your account.
              </li>
              <br/>
            <li>
            <strong><u>December, 19th 2018</u></strong> : Changes regarding COSS 1.2
              <ul>
               <li> A new api has been added to provide trade details for an order <br/>  
               https://trade.coss.io/c/api/v1/order/trade-detail
                 <br/>
              </li>
             <li> For API server status please use following <br/>  
             https://trade.coss.io/c/api/v1/ping
                 <br/>
              </li>
             <li> For API server  time please use following <br/>  
             https://trade.coss.io/c/api/v1/time
                 <br/>
              </li>
             <li> For retrieving market summaries please use  
             https://exchange.coss.io/api/getmarketsummaries
                 [1 unit] <br/>
              Please note that this api is used by external data providers and the symbol format is different from api for users.   
              </li>
              <li>
                Updated Document to reflect paths specific to hosts.
              </li>
              <li>
               Your account may get blocked when you place and cancel orders too frequently as explained below:
               <br/><br/>
               The frequency of your order placement and cancellation was too high.<br/>
               First occurrence: Your transactions will be blocked for 5 minutes.<br>
               Second occurrence: You will be blocked for 1 hour.<br>
               Third occurrence: Your account will be locked for 24 hours.<br/>
               Fourth occurrence: Your account will be locked for a longer duration. You may need to contact support to unlock your account.
              </li>          
            </ul>
        <ul>
          <li>
            <strong><u>December, 7th 2018</u></strong> : Changes regarding COSS 1.2
            <ul>
              <li>
            Rate Limits have been an issue. To make it fairer and easier to deal with burst data, we’re decreasing the API throttling. We’re assigning a usage limit of 1000 units per “MINUTE”. Different API calls have different weights, heavier calls use more units. We’ve added the weight below in []’s
              </li>
              <li>
                <code>https://api.coss.io/v1/</code> will be depreciated and split into 2 two domains:
                <ol>
                  <li>
                    <code>https://engine.coss.io/api/v1/</code> - this will handle all our pricing streams
                    <ul>
                      <li>
                        <strong>GET</strong> <u>/dp</u> - for depth  [1 unit]
                      </li>
                      <li>
                        <strong>GET</strong> <u>/ht</u> - for trade history [1 unit]
                      </li>
                    </ul>
                  </li>
                  <li>
                    <code>https://trade.coss.io/c/api/v1/</code> - this will handle all account and order requests
                    <ul>
                      <li>
                        <strong>POST</strong> <u>/order/add</u> [1 unit]
                      </li>
                      <li>
                        <strong>DELETE</strong> <u>/order/cancel</u> [1 unit]
                      </li>
                      <li>
                        <strong>POST</strong> <u>/order/details</u> [1 unit]
                      </li>
                      <li>
                        <strong>POST</strong> <u>/order/list/open</u> [1 unit]
                      </li>
                      <li>
                        <strong>POST</strong> <u>/order/list/completed</u> [1 unit]
                      </li>
                      <li>
                        <strong>POST</strong> <u>/order/list/all</u> [5 units]
                      </li>
                      <li>
                        <strong>GET</strong> <u>/account/balances</u> [5 units]
                      </li>
                      <li>
                        <strong>GET</strong> <u>/account/details</u> [5 units] 
                      </li>
                      <li>
                        <strong>GET</strong> <u>/market-price</u> [1 unit]
                      </li>
                      <li>
                        <strong>GET</strong> <u>/exchange-info</u> [1 unit]
                      </li>
                    </ul>
                  </li>
                </ol>
              </li>
              <li>
                We’ve added price precision on order price and size (similar to other exchanges)
                e.g. for ETH_BTC price precision 5 order size precision 3 (full list below)
                The precision per pair is available from the /exchange-info API call
              </li>
              <li>
                We’ve added a new websocket price feed for order book depth and trades, it’s efficient as 0 units to use
                <ul>
                  <li>
                     <strong>GET</strong> <u>wss://engine.coss.io/ws/v1/ht/{symbol}</u>
                    <blockquote>
                      {<br />
                        &emsp;"c" : 1544064724447,   // Event time<br />
                        &emsp;"e" : "history_trade", // Event type<br />
                        &emsp;"k" : 461999,       // ID<br />
                        &emsp;"m" : false,        // Buyer Made Order (buy order)<br />
                        &emsp;"p" : "0.02771000", // Price<br />
                        &emsp;"q" : "0.37800000", // Quantity (Size)<br />
                        &emsp;"s" : "ETH_BTC",    // Symbol<br />
                        &emsp;"t" : 1544064724247 // Trade Time<br />
                      }
                    </blockquote>
                  </li>
                  <li>
                    <strong>GET</strong> <u>wss://engine.coss.io/ws/v1/dp/{symbol}</u>
                    <blockquote>
                      {<br />
                        &emsp;"a" : [ // asks<br />
                        &emsp;&emsp;[<br />
                        &emsp;&emsp;&emsp;&emsp;"0.02773000",   // price<br />
                        &emsp;&emsp;&emsp;&emsp;"0.67800000"    // size<br />
                        &emsp;&emsp;]<br />
                        &emsp;],<br />
                        &emsp;"b" : [ // bids<br />
                        &emsp;&emsp;[<br />
                        &emsp;&emsp;&emsp;"0.02769000",   // price<br />
                        &emsp;&emsp;&emsp;"0.97800000"    // size<br />
                        &emsp;&emsp;]<br />
                        &emsp;]<br />
                        &emsp;"e" : "depthUpdate" // event_type<br />
                        &emsp;"s" : "ETH_BTC"   // Symbol<br />
                        &emsp;"t" : 1544064724247 // Time<br />
                      }<br />
                    </blockquote>
                  </li>
                </ul>
              </li>
              <li>
                A list of the symbols and the precision (some samples)
                <table>
                  <thead>
                    <tr>
                      <th>Pairs</th>
                      <th>Token</th>
                      <th>Base Pair</th>
                      <th>Order Amount Limit Decimal</th>
                      <th>Order Price Limit Decimal</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td>COSS_BTC</td>
                      <td>COSS</td>
                      <td>BTC</td>
                      <td>2</td>
                      <td>6</td>
                    </tr>
                    <tr>
                      <td>COSS_ETH</td>
                      <td>COSS</td>
                      <td>ETH</td>
                      <td>2</td>
                      <td>6</td>
                    </tr>
                    <tr>
                      <td>KIN_BTC</td>
                      <td>KIN</td>
                      <td>BTC</td>
                      <td>0</td>
                      <td>8</td>
                    </tr>
                    <tr>
                      <td>KIN_ETH</td>
                      <td>KIN</td>
                      <td>ETH</td>
                      <td>1</td>
                      <td>7</td>
                    </tr>
                    <tr>
                      <td>NEO_BTC</td>
                      <td>NEO</td>
                      <td>BTC</td>
                      <td>3</td>
                      <td>5</td>
                    </tr>
                    <tr>
                      <td>NEO_ETH</td>
                      <td>NEO</td>
                      <td>ETH</td>
                      <td>3</td>
                      <td>5</td>
                    </tr>
                  </tbody>
                </table>
              </li>
            </ul>
          </li>
          <li>
            <strong><u>November, 16th 2018</u></strong> : Updated API Document</li>
          <li>
            <strong><u>October, 31st 2018</u></strong> : To match industry convention, changed response code for Order creation from <code>202</code> to <code>200</code></li>
          <li>
            <strong><u>October, 30th 2018</u></strong> : Reduced Throttling to 1 request per second</li>
        </ul>
        </p> <p>
          <h3>Swagger Specs</h3>
          <ul>
            <li>You can also copy &amp; paste
              <a href="https://s3-ap-southeast-1.amazonaws.com/coss-dev-s3-static-site-assets/api-gateway/apispecs.json">coss-api-json</a> into an online swagger editor at
              <a href="http://swagger.io">swagger.io</a>
            </li>
        </p> <p>
          </ul>
        </p> <p>
          <h3>Sample Code</h3>
          <ul>
            <li>Please refer to
              <a href="https://github.com/coss-exchange">community trading wrapper</a> for sample codes</li>
          </ul>
        </p> <p>
          <h3>Note: Known Issues</h3>
          <h3>SIGNED GET Method</h3>
          <ul>
            <li>Please provide the query string (Signed GET methods for account/balances and account/details) in alphabetical order. The cloud provider sends the query strings of parameter names (arranged alphabetically) so the signed pay load may not match at server end. As a work around, please provide parameters in the  following format:
              recvWindow=5000&timestamp=12345678</li>
          </ul>
        </p> <h3>Orders</h3> <ul>
          <li>After creation of a new order, a response code <code>200</code> is sent when order created successfully.</li>
          <li>stop_price in order request and response is not used. The field is for future release.</li>
          <li>Completed orders not returning orders which were created before public API release.</li>
          <li>Market Orders are not currently supported. Please use Limit Orders.</li>
        </ul> <p>
          <br/> </p>
        <p>
          <h3>General</h3>
          <ul>
            <li>Timestamp and recvWindow are for future release and currently not used for request timeout, however for signed GET requests the signed payload must be provided: recvWindow=5000&amp;timestamp=12345678</li>
            <li>Throttling is now set to 1 request every second, this will change over the coming weeks</li>
          </ul>
        </p> <p>
          <br/> </p>
      responses:
        '200':
          description: COSS public api for registered traders.
        '500':
          description: COSS public api not available.
  /websockets:
    get:
      tags:
        - Market
      summary: Websocket routes available on COSS.io.
      description:
      >-
        The trade feed websocket provides users with a websocket that monitors trades completed on a specific symbol.
        
        
        The trade feed websocket is available at wss://engine.coss.io/ws/v1/ht/{symbol}, where {symbol} is replaced wih the trade feed to monitor 
        (for example, BTC_USDT).
        
        
        The order book depth websocket provides users with a real-time feed of the chosen symbol's order book.
        
        
        The order book depth websocket is available at wss://engine.coss.io/ws/v1/dp/{symbol}, where {symbol} is replaced with the desired order book (e.g. ETH_BTC).
        
        
        <b>Examples</b>
        
        
        Python
        
        
        ```python
        
        
        from websocket import create_connection

        import json
        
        
        def run_depth_socket(symbol):
          ws = create_connection(f"wss://engine.coss.io/ws/v1/dp/{symbol}")
          print("Running...")
          while True:
              result = ws.recv()
              result = json.loads(result)
        
        
        def run_trade_feed_socket(symbol):
          ws = create_connection(f"wss://engine.coss.io/ws/v1/ht/{symbol}")
          print("Running...")
          while True:
              result = ws.recv()
              result = json.loads(result)
        
        ```
        
        
        ```js
        
        
        const WebSocket = require('ws');


        // ETH_BTC depth websocket
        
        const depth_socket = new WebSocket('wss://engine.coss.io/ws/v1/dp/ETH_BTC');
      
        // ETH_BTC trade websocket
        
        const trade_feed_websocket = new WebSocket('wss://engine.coss.io/ws/v1/ht/ETH_BTC');

  
        
        
        depth_socket.on('message', function incoming(data) {
          console.log(data);
        });
        
        
        trade_feed_websocket.on('message', function incoming(data) {
          console.log(data);
        });
        
        
        ```
      responses:
        '200':
          description:
        '500':
          description:
  /account/balances:
    get:
      tags:
        - Account
      summary: Retrieves account balances information.
      description: >-
        This route returns all balances within your account.
        
        
        URL: https://trade.coss.io/c/api/v1/account/balances
        
        
        <b>Requirements</b>
        <ul><li>Public Key in the <b>Authorization</b> header</li>
        <li>HMAC-256 encoded Private Key in the <b>Signature</b> header</li>
        <li>The current timestamp in the <b>timestamp</b> header</li>
        </ul>
        
        
        <b>Examples</b>
        
        
        Python
        
        
        ```python
        
        import hashlib
        
        import hmac
        
        import json
        
        import time
        
        from urllib.parse import urlencode
        
        import requests
                
        
        public_key = "your public key"
        
        private_key = bytearray("your private key", encoding="utf-8")
        
        
        # Many requests require the current timestamp!
        
        timestamp = urlencode({"timestamp": int(time.time() * 1000)})
        
        
        # Encrypting your private key set above along with the current time
        
        encrypted_private_key_and_timestamp = hmac.new(
            private_api_key, timestamp.encode("utf-8"), hashlib.sha256
        ).hexdigest()
        
        
        # Signing your API request
        
        order_headers["Signature"] = encrypted_private_key_and_timestamp
        
        
        # Sending the request to the API!
        
        my_balances = requests.get("https://trade.coss.io/c/api/v1/account/balances",
            headers=order_headers,
            params=timestamp,
        ).json()
        
        print(my_balances)  # JSON array of your account balances
        
        ```
        

        Node JS
        
        
        ```js
        
        const request = require('superagent');
        
        const CryptoJS = require('crypto-js');
        
        const querystring = require('querystring');
        
        
        const public_api_key = "your public api key";
        
        
        const secret_api_key = "your secret api key";
        
        
        var now = new Date().getTime()
        
        
        var query_params = {
            'recvWindow': 5000,
            'timestamp': now
        }
        
        
        var stringified_query_params = querystring.stringify(query_params)
        
        
        var sign = CryptoJS.HmacSHA256(stringified_query_params, secret_api_key).toString(CryptoJS.enc.Hex)
        
        
        let url = "https://trade.coss.io/c/api/v1/account/balances";
        
        
        var req_headers = {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest',
            'Authorization': public_api_key,
            'Signature': sign,
        }
        
        
        async function make_request(url, headers, payload) {
            let response = await request.get(url).set(headers).query(payload)
            console.log(response.body) // for demonstration purposes
            return response.body;
        }


        make_request(url, req_headers, stringified_query_params)
        
        
        ```
      servers:
        - url: 'https://trade.coss.io/c/api/v1/'
      parameters:
        - name: timestamp
          in: query
          description: >-
            Mandatory field for retrieving account balances in query string
            ?recvWindow=5000×tamp=1540203005798. The future release of API
            generate use timestamp provided by user in conjunction with
            recvWindow parameter provided by the user to check if request has
            reached in time. If the server timestamp is later than sun of value
            of timestamp and recvWindow by the user  then request will be
            rejected.
          required: true
          schema:
            type: integer
            format: int64
        - name: recvWindow
          in: query
          description: >-
            Optional field for retrieving account balances in query string
            ?recvWindow=5000×tamp=1540203005798. 
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Account Balances Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountBalanceArray'
        '400':
          description: Error Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /account/details:
    get:
      tags:
        - Account
      summary: Retrieves account details information.
      description: >-
        Retrieves details associated with your account.
        
        
        URL: https://trade.coss.io/c/api/v1/account/details
        
                
        
        <b>Requirements</b>
        <ul><li>Public Key in the <b>Authorization</b> header</li>
        <li>HMAC-256 encoded Private Key in the <b>Signature</b> header</li>
        <li>The current timestamp in the <b>timestamp</b> header</li>
        </ul>
        
        
        <b>Examples</b>
        
        
        Python
        
        
        ```python
        
        import hashlib
        
        import hmac
        
        import json
        
        import time
        
        from urllib.parse import urlencode
        
        import requests
                
        
        public_key = "your public key"
        
        private_key = bytearray("your private key", encoding="utf-8")
        
        order_headers = {
            "Content-Type": "application/json",
            "X-Requested-With": "XMLHttpRequest",
            "Authorization": public_api_key,
            "Signature": None,
        }
        
        
        # Many requests require the current timestamp!
        
        timestamp = urlencode({"timestamp": int(time.time() * 1000)})
        
        
        # Encrypting your private key set above along with the current time
        
        encrypted_private_key_and_timestamp = hmac.new(
            private_api_key, timestamp.encode("utf-8"), hashlib.sha256
        ).hexdigest()
        
        
        # Signing your API request
        
        order_headers["Signature"] = encrypted_private_key_and_timestamp
        
        
        # Sending the request to the API!
        
        account_details = requests.get(
            "https://trade.coss.io/c/api/v1/account/details",
            headers=order_headers,
            params=timestamp,
        ).json()
        
        print(account_details)  # Your account details
        
        ```
        
        
        Node JS
        
        
        ```js
        
        const request = require('superagent');
        
        const CryptoJS = require('crypto-js');
        
        const querystring = require('querystring');
        
        
        const public_api_key = "your public api key";
        
        
        const secret_api_key = "your secret api key";
        
        
        var now = new Date().getTime()
        
        
        var query_params = {
            'recvWindow': 5000,
            'timestamp': now
        }
        
        
        var stringified_query_params = querystring.stringify(query_params)
        
        
        var sign = CryptoJS.HmacSHA256(stringified_query_params, secret_api_key).toString(CryptoJS.enc.Hex)
        
        
        let url = "https://trade.coss.io/c/api/v1/account/details";
        
        
        var req_headers = {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest',
            'Authorization': public_api_key,
            'Signature': sign,
        }
        
        
        async function make_request(url, headers, payload) {
            let response = await request.get(url).set(headers).query(payload)
            console.log(response.body) // for demonstration purposes
            return response.body;
        }
        
        
        make_request(url, req_headers, stringified_query_params)
        
        
        ```
        
      servers:
        - url: 'https://trade.coss.io/c/api/v1/'
      parameters:
        - name: timestamp
          in: query
          description: >-
            Mandatory field for retrieving account details in query string
            ?recvWindow=5000×tamp=1540203005798.If the server timestamp is later
            than sum of value of timestamp and recvWindow provided by the user 
            then request will be rejected.
          required: true
          schema:
            type: integer
            format: int64
        - name: recvWindow
          in: query
          description: >-
            Optional field for retrieving account balances in query string
            ?timestamp=1540203005798&recvWindow=5000. 
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Account Details Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDetails'
        '400':
          description: Error Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /c/order/symbols:
    get:
      tags:
        - Market
      summary: Get decimal precision and trading status for all symbols
      description: >-
              This is a public function that provides information about valid decimal precisions and whether trading is allowed
              across all symbols. This API route does not require a private key signature.
              
              
              URL: "https://www.coss.io/c/order/symbols"
              
              
              **Requirements**
        
              <ul><li>None.</li></ul>
              
              
              **Examples**
              
              
              Python
              
              
              ```python
              
              import requests
              
              public_api_key = "your public API key"
              
              headers = {
                  "Content-Type": "application/json",
                  "X-Requested-With": "XMLHttpRequest",
                  "Authorization": public_api_key,
                  "Signature": None,
              }
              
              symbol_info = requests.get("https://www.coss.io/c/order/symbols", headers=headers).json()
              
              print(symbol_info) # Information for all market symbols.
              
              ```
              
              
              NodeJS
              
              
              ```js
              
              const request = require("request");
              
              const public_api_key = "your public API key";
              
              
              const options = {
                url: "https://www.coss.io/c/order/symbols",
                method: "GET",
                headers: {
                "Content-Type": "application/json",
                "X-Requested-With": "XMLHttpRequest",
                "Authorization": public_api_key, 
                "Signature": null}
              };
              
              
              request(options, function(err, res, body) {
                  let json = JSON.parse(body);
                  console.log(json);
              });
              
              ```
      servers:
        - url: 'https://www.coss.io/c/'
      parameters:
      responses:
        '200':
          description: Symbol Information Response
          content:
            application/json:
              schema:
        '400':
          description: Error Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /c/coins/getinfo/all:
    get:
      tags:
        - Market
      summary: Gets information on all currencies listed on COSS.io.
      description: >-
              This is a public function that provides information about all of the currencies listed on COSS.io. This includes buy and sell limits,
              withdrawal and deposit fees, and minimum order amounts. This API route does not require a private key signature.
              
              
              URL: "https://www.coss.io/c/coins/getinfo/all"
              
              
              **Requirements**
        
              <ul><li>None.</li></ul>
              
              
              **Examples**
              
              
              Python
              
              
              ```python
              
              import requests
              
              public_api_key = "your public API key"
              
              headers = {
                  "Content-Type": "application/json",
                  "X-Requested-With": "XMLHttpRequest",
                  "Authorization": public_api_key,
                  "Signature": None,
              }
              
              currency_info = requests.get("https://www.coss.io/c/coins/getinfo/all", headers=headers).json()
              
              print(currency_info) # Information about all listed currencies.
              
              ```
              
              
              NodeJS
              
              
              ```js
              
              const request = require("request");
              
              const public_api_key = "your public API key";
              
              
              const options = {
                url: "https://www.coss.io/c/order/symbols",
                method: "GET",
                headers: {
                "Content-Type": "application/json",
                "X-Requested-With": "XMLHttpRequest",
                "Authorization": public_api_key, 
                "Signature": null}
              };
              
              
              request(options, function(err, res, body) {
                  let json = JSON.parse(body);
                  console.log(json);
              });
              
              ```
      servers:
        - url: 'https://www.coss.io/c/'
      parameters:
      responses:
        '200':
          description: Symbol Information Response
          content:
            application/json:
              schema:
        '400':
          description: Error Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /c/coins/get_base_list:
    get:
      tags:
        - Market
      summary: Get a list of the base currencies currently in use on COSS.io, along with minimum order limits.
      description:
       >-
              This is a public API route that provides information on the base currencies listed on COSS.io, along with current minimum
              order limits. This API route does not require a private key signature.
              
              
              URL: "https://www.coss.io/c/coins/get_base_list"
              
              
              **Requirements**
        
              <ul><li>None.</li></ul>
              
              
              **Examples**
              
              
              Python
              
              
              ```python
              
              import requests
              
              public_api_key = "your public API key"
              
              headers = {
                  "Content-Type": "application/json",
                  "X-Requested-With": "XMLHttpRequest",
                  "Authorization": public_api_key,
                  "Signature": None,
              }
              
              currency_info = requests.get("https://www.coss.io/c/coins/get_base_list", headers=headers).json()
              
              print(currency_info) # Information about all listed currencies.
              
              ```
                            
              
              NodeJS
              
              
              ```js
              
              const request = require("request");
              
              const public_api_key = "your public API key";
              
              
              const options = {
                url: "https://www.coss.io/c/coins/get_base_list",
                method: "GET",
                headers: {
                "Content-Type": "application/json",
                "X-Requested-With": "XMLHttpRequest",
                "Authorization": public_api_key, 
                "Signature": null}
              };
              
              
              request(options, function(err, res, body) {
                  let json = JSON.parse(body);
                  console.log(json);
              });
              
              ```
      servers:
        - url: 'https://www.coss.io/c/'
      parameters:
      responses:
        '200':
          description: Symbol Information Response
          content:
            application/json:
              schema:
        '400':
          description: Error Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /exchange-info:
    get:
      tags:
        - Exchange information
      summary: 'Provides information about trading rules, symbols etc.'
      description: >-
        This is a public function that provides
        information about trading rules, available markets, and other public information. This API route
        does not require signing. **Importantly for trading, it provides the amount and price limit decimals 
        required for placing accurate orders.**
        
        
        URL: https://trade.coss.io/c/api/v1/exchange-info
        
        
        <b>Requirements</b>
        
        <ul><li>None.</li></ul>
        
        
        <b>Examples</b>
        
        
        Python
        
        
        ```python
        
        import requests
        
        exchange_info = requests.get(
        "https://trade.coss.io/c/api/v1/exchange-info").json()
      
        print(exchange_info) # Information about each market on COSS.io
        
        ```
        
        
        Node JS
        
        
        ```js
        
        const request = require('request');
        
        
        request("https://trade.coss.io/c/api/v1/exchange-info", function (error, response, body) {
        
        
        console.error('error:', error);
        
        console.log('statusCode:', response && response.statusCode);
        
        console.log('body:', body);
        
        });
        
        ```
        

      servers:
        - url: 'https://trade.coss.io/c/api/v1/'
      responses:
        '200':
          description: Exchange Information Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExchangeInfo'
        '500':
          description: Error Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /ping:
    get:
      tags:
        - Server information
      summary: Test connectivity to API
      description: >-
        Tests your connectivity to the API. This API route does not require signing.
        
        
        URL: https://trade.coss.io/c/api/v1/ping
        
        
        **Requirements**
        
        <ul><li>None.</li></ul>
        
        
        **Examples**
        
        
        Python
        
        
        ```python
        
        import requests
        
        ping = requests.get("https://trade.coss.io/c/api/v1/ping").json()
        
        print(ping) # Server connectivity
        
        ```
        
        
        Node JS
        
        
        ```js
        
        const request = require('request');


        request("https://trade.coss.io/c/api/v1/ping", function (error, response, body) {
        
        
        console.error('error:', error);
        
        console.log('statusCode:', response && response.statusCode);
        
        console.log('body:', body);
        
        });
        
        ```
      servers:
        - url: 'https://trade.coss.io/c/api/v1/'
      responses:
        '200':
          description: API Connectivity Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerStatusInfo'
        '500':
          description: Error Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /time:
    get:
      tags:
        - Server information
      summary: Test connectivity to API and get Server time
      description: >-
        Gets the current server time. This API route does not require signing.
        
        
        URL: https://trade.coss.io/c/api/v1/time
        
        
        **Requirements**
        
        <ul><li>None.</li></ul>
        
        
        **Examples**
        
        
        Python
        
        
        ```python
        
        import requests
        
        server_time = requests.get("https://trade.coss.io/c/api/v1/time").json()
        
        print(server_time) # Server time
        
        ```
                
        
        Node JS
        
        
        ```js
        
        const request = require('request');


        request("https://trade.coss.io/c/api/v1/time", function (error, response, body) {
        
        
        console.error('error:', error);
        
        console.log('statusCode:', response && response.statusCode);
        
        console.log('body:', body);
        
        });
        
        ```
        
      servers:
        - url: 'https://trade.coss.io/c/api/v1/'
      responses:
        '200':
          description: API Connectivity and Time Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerTimeInfo'
        '500':
          description: Error Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /getmarketsummaries:
    get:
      tags:
        - Market
      summary: Provides information about market summaries for symbols.
      description: >-
        Retrieves market summaries for all symbols. This API route does not require signing.
        
        
        URL: https://exchange.coss.io/api/getmarketsummaries
        
        
        **Requirements**
        
        <ul><li>None.</li></ul>
        
        
        **Examples**
        
        
        Python
        
        ```python
        
        market_summaries = requests.get(
        "https://exchange.coss.io/api/getmarketsummaries"
        ).json()
    
        print(market_summaries)  # Market summaries
        
        ```
        
                    
        Node JS
        
        
        ```js
        
        const request = require('request');


        request("https://exchange.coss.io/api/getmarketsummaries", function (error, response, body) {
        
        
        console.error('error:', error);
        
        console.log('statusCode:', response && response.statusCode);
        
        console.log('body:', body);
        
        });
        
        ```    
      servers:
        - url: 'https://exchange.coss.io/api/'
      responses:
        '200':
          description: Market Summaries Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MarketSummariesResponse'
        '400':
          description: Error Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /market-price/:
    get:
      tags:
        - Market
      summary: Retrieves market price information
      description: >-
        Retrieves market price for all symbols if no symbol is provided as query string
        parameter. If a symbol is provided then retrieves market-price for the
        symbol. This API route does not require signing.
        
        
        Non-parameterized URL: https://trade.coss.io/c/api/v1//market-price
        
        
        Parameterized URL: https://trade.coss.io/c/api/v1//market-price?symbol=ETH_BTC
        
        
        **Requirements**
        
        
        <ul><li>None.</li></ul>
        
        
        **Examples**
        
        
        Python
        
        ```python
        
        import requests
        
        
        all_symbols = requests.get("https://trade.coss.io/c/api/v1/market-price").json()
    
        print(all_symbols)  # Market prices for all symbols
        
        
        eth_btc = requests.get("https://trade.coss.io/c/api/v1/market-price?symbol=ETH_BTC").json()
        
        print(eth_btc) # Market price for ETH_BTC
        
        ```
        
        
        NodeJS
        
        
        ```js

        
        const request = require('request');


        request("https://trade.coss.io/c/api/v1/market-price", function (error, response, body) {

        
        console.error('error:', error);
        
        console.log('statusCode:', response && response.statusCode);
        
        console.log('body:', body);
        
        
        });
        
        
        // Parameterized request
        
        request("https://trade.coss.io/c/api/v1/market-price?symbol=ETH_BTC", function (error, response, body) {

        
        console.error('error:', error);
        
        console.log('statusCode:', response && response.statusCode);
        
        console.log('body:', body);
        
        
        });
        
        
        ```
      servers:
        - url: 'https://trade.coss.io/c/api/v1/'
      parameters:
        - name: symbol
          in: query
          description: >-
            Retrieves market-price for all symbols if symbol is not provide in
            parameter otherwise retrieves information for symbol provided in
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Market Price Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MarketPriceArray'
        '400':
          description: Error Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /dp/:
    get:
      tags:
        - Market
      summary: Get the order book for given symbol
      description: >-
        Gets the order book for a given symbol. This API route is public and does not require signing. **Note here that the unparameterized URL is only included for 
        documentation / abstraction purposes in your own code**.
        
        
        Unparameterized URL: https://engine.coss.io/api/v1/dp
        
        
        Parameterized URL: https://engine.coss.io/api/v1/dp?symbol=ETH_BTC
        
        
        **Requirements**
        
        
        <ul><li>None.</li></ul>
        
        
        **Examples**
        
        
        Python
        
        ```python
        
        import requests
        
        
        eth_btc = requests.get("https://engine.coss.io/api/v1/dp?symbol=ETH_BTC").json()
        
        print(eth_btc) # Order book for ETH_BTC
        
        ```
        
        
        NodeJS
        
        
        ```js
        
        
        const request = require('request');


        request("https://engine.coss.io/api/v1/dp?symbol=ETH_BTC", function (error, response, body) {
        
          console.error('error:', error);
          console.log('statusCode:', response && response.statusCode);
          console.log('body:', body);
          
        });
                
        ```
        
      servers:
        - url: 'https://engine.coss.io/api/v1/'
      parameters:
        - name: symbol
          in: query
          description: pair id to retrieve market depth
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Market Depth Response '
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Depth'
        '400':
          description: Error Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /ht/:
    get:
      tags:
        - Market
      summary: Retrieve market information for given symbol
      description: >-
        Retrieves market information for a specific symbol. This API route is public and does not require signing. **Note here that the unparameterized URL is only included for 
        documentation / abstraction purposes in your own code**.
        
        
        Unparameterized URL: https://engine.coss.io/api/v1/ht
        
        
        Parameterized URL: https://engine.coss.io/api/v1/ht?symbol=ETH_BTC
        
        
        **Requirements**
        
        
        <ul><li>None.</li></ul>
        
        
        **Examples**
        
        
        Python
        
        ```python
        
        import requests
        
        
        eth_btc = requests.get("https://engine.coss.io/api/v1/ht?symbol=ETH_BTC").json()
        
        print(eth_btc) # Market information for ETH_BTC
        
        ```
        
        
        NodeJS
        
        
        ```js
        
        
        const request = require('request');


        request("https://engine.coss.io/api/v1/ht?symbol=ETH_BTC", function (error, response, body) {
        
          console.error('error:', error);
          console.log('statusCode:', response && response.statusCode);
          console.log('body:', body);
          
        });
                
        ```
      servers:
        - url: 'https://engine.coss.io/api/v1/'
      parameters:
        - name: symbol
          in: query
          description: pair id to retrieve market information.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Trade History Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TradeHistoryResponse'
        '400':
          description: Error Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /order/add/:
    post:
      tags:
        - Order management
      summary: Place a new order
      description: >-
        Places a new order on the given market.
        
        
        **Note: ```order_price``` and ```order_size``` must have decimal places at or below the pair's amount precision!**
        
        
        You can get a given symbol's order amount precision by requesting the symbol via https://api.coss.io/v1/spec#tag/Exchange-information .
        
        
        Unparameterized URL: https://trade.coss.io/c/api/v1/order/add
        
        
        <b>General Requirements</b>
        <ul><li>Public Key in the <b>Authorization</b> header</li>
        <li>HMAC-256 encoded Private Key in the <b>Signature</b> header</li>
        <li>The current timestamp in the <b>timestamp</b> header</li>
        <li>The **data** field in your request which contains public order data in JSON string format.</li>
        </ul>
        
        
        <b>Route-specific Requirements</b>
        <ul><li>order_symbol --> ```"ETH_BTC"```</li>
        <li>order_side --> ```"BUY" | "SELL"```</li>
        <li>type -->  ```"limit" | "market"```</li>
        <li>order_size --> ```0.025```</li>
        <li>order_price --> ```0.019```</li>
        <li>timestamp --> ```1572189857```</li></ul>
        
        
        <b>Examples</b>
        
        
        Python
        
        
        ```python
        
        import hashlib
        
        import hmac
        
        import json
        
        import time
        
        from urllib.parse import urlencode
        
        import requests
                
        
        public_key = "your public key"
        
        private_key = bytearray("your private key", encoding="utf-8")
        
        
        order_headers = {"Content-Type": "application/json",
                        "X-Requested-With": "XMLHttpRequest",
                        "Authorization": public_api_key,
                        "Signature": None,
        }
        
        
        # Many requests require the current timestamp!
        
        timestamp = urlencode({"timestamp": int(time.time() * 1000)})
        
        
        # Setting order parameters
        
        symbol = "ETH_BTC"
        
        side = "BUY"
        
        order_type = "limit"
        
        size = 0.025
        
        price = 0.019
        
        # Note the use of separators for json.dumps
        
        order_params = json.dumps({"order_symbol": symbol,
                      "order_side": side,
                      "type": order_type,
                      "order_size": size,
                      "order_price": price,
                      "timestamp": timestamp
        }, separators=(",", ":"))
        
        
        # Encrypting your private key set above along with your order parameters
        
        encrypted_private_key_and_order_params = hmac.new(
            private_api_key, order_params.encode("utf-8"), hashlib.sha256
        ).hexdigest()
        
        
        # Signing your API request
        
        order_headers["Signature"] = encrypted_private_key_and_order_params
        
        
        # Sending the request to the API! Note the "data" field includes your public order data!

        
        order = requests.post("https://trade.coss.io/c/api/v1" + "/order/add/", headers=order_headers, data=order_params)
        
        
        print(order)  # JSON summary of your order (HTTP Status)
        
        ```
        
        
        Node JS
        
        
        ```js
        
        
        const request = require('superagent');

        const CryptoJS = require('crypto-js');
        
        const querystring = require('querystring');
        
        
        const public_api_key = "your public api key";
        
        
        const secret_api_key = "your secret api key";
        
        
        
        var now = new Date().getTime()
        
        
        var query_params = {
            'order_symbol': 'ETH_BTC',
            'order_price': 0.020490,
            'order_side': 'SELL', // or BUY
            'order_size': 0.02,
            'type': 'limit', // or 'market'
            'timestamp': now,
            'recvWindow': 5000
        }
        
        
        var stringified_query_params = JSON.stringify(query_params)
        
        
        var sign = CryptoJS.HmacSHA256(stringified_query_params, secret_api_key).toString(CryptoJS.enc.Hex)
        
        
        let url = "https://trade.coss.io/c/api/v1/order/add";
        
        
        var req_headers = {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest',
            'Authorization': public_api_key,
            'Signature': sign,
        }
        
        async function make_request(url, headers, payload) {
            let response = await request.post(url).set(headers).send(payload)
            console.log(response.body) // for demonstration purposes
            return response.body;
        }
        
        
        make_request(url, req_headers, stringified_query_params)
        
        
        ```
        
      servers:
        - url: 'https://trade.coss.io/c/api/v1/'
      security:
        - APIKeyHeader: []
          APISignatureHeader: []
      responses:
        '200':
          description: 'Create Order Response '
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400':
          description: Error Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        description: The new order to be created
        required: true
  /order/cancel/:
    delete:
      tags:
        - Order management
      summary: Cancel an open order
      description: >-
        Cancel an open order.
        
        Unparameterized URL: https://trade.coss.io/c/api/v1/order/cancel
        
        
        <b>General Requirements</b>
        
        <ul><li>Public Key in the <b>Authorization</b> header</li>
        <li>HMAC-256 encoded Private Key in the <b>Signature</b> header</li>
        <li>The current timestamp in the <b>timestamp</b> header</li>
        </ul>
        
        
        <b>Route-specific Requirements</b>
        <ul><li>order_id --> ```"9e5re4dd-3329-401d-81f5-dff785e1c4e7"```</li>
        <li>order_symbol --> ```"ETH_BTC"```</li>
        <li>timestamp --> ```1572189857```</li>
        </ul>
        
        
        <b>Examples</b>
        
        
        Python
        
        
        ```python
        
        import hashlib
        
        import hmac
        
        import json
        
        import time
        
        from urllib.parse import urlencode
        
        import requests
                
        
        public_key = "your public key"
        
        private_key = bytearray("your private key", encoding="utf-8")
        
        
        order_headers = {"Content-Type": "application/json",
                        "X-Requested-With": "XMLHttpRequest",
                        "Authorization": public_api_key,
                        "Signature": None,
        }
        
        
        # Many requests require the current timestamp!
        
        timestamp = urlencode({"timestamp": int(time.time() * 1000)})
        
        
        # Setting order parameters
        
        # Note the use of separators for json.dumps
        
        order_id = "your order id"
        
        symbol = "ETH_BTC"
        
        order_to_cancel = json.dumps({"order_id": order_id,
                      "order_symbol": symbol,
                      "timestamp": timestamp
        }, separators=(",", ":"))
        
        
        # Encrypting your private key set above along with your selected order parameters
        
        encrypted_private_key_and_order_to_cancel = hmac.new(
            private_api_key, order_to_cancel.encode("utf-8"), hashlib.sha256
        ).hexdigest()
        
        
        # Signing your API request
        
        order_headers["Signature"] = encrypted_private_key_and_order_to_cancel
        
        
        # Sending the request to the API! Note the use of a delete request.

        
        cancelled_order = requests.delete("https://trade.coss.io/c/api/v1" + "/order/cancel", headers=order_headers, payload=encrypted_private_key_and_order_to_cancel)
        
        
        print(cancelled_order)  # JSON summary of your cancelled order (200 response)
        
        ```
        
        
        Node JS
        
        
        ```js
        
        
        const request = require('superagent');

        const CryptoJS = require('crypto-js');
        
        const querystring = require('querystring');
        
        
        const public_api_key = "your public api key";
        
        
        const secret_api_key = "your private api key";
        
        
        var now = new Date().getTime()
        
        
        var query_params = {
            'order_id': "your order id",
            'order_symbol': 'ETH_BTC',
            'recvWindow': 5000,
            'timestamp': now
        }
        
        
        var stringified_query_params = JSON.stringify(query_params)
        
        
        var sign = CryptoJS.HmacSHA256(stringified_query_params, secret_api_key).toString(CryptoJS.enc.Hex)
        
        
        let url = "https://trade.coss.io/c/api/v1/order/cancel";
        
        
        var req_headers = {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest',
            'Authorization': public_api_key,
            'Signature': sign,
        }
        
        async function make_request(url, headers, payload) {
            let response = await request.delete(url).set(headers).send(payload)
            console.log(response.body) // for demonstration purposes
            return response.body;
        }
        
        
        make_request(url, req_headers, stringified_query_params)
        
        ```
        
      servers:
        - url: 'https://trade.coss.io/c/api/v1/'
      security:
        - APIKeyHeader: []
          APISignatureHeader: []
      responses:
        '200':
          description: Order Cancellation Successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CancelOrderResponse'
        '400':
          description: Error Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelOrder'
        description: The order to be cancelled
        required: true
  /order/details/:
    post:
      tags:
        - Order management
      summary: Get order detail for specific order.
      description: >-
        Get details for a specific order.
        
        Unparameterized URL: https://trade.coss.io/c/api/v1/order/details
        
        
        <b>General Requirements</b>
        <ul><li>Public Key in the <b>Authorization</b> header</li>
        <li>HMAC-256 encoded Private Key in the <b>Signature</b> header</li>
        <li>The current timestamp in the <b>timestamp</b> header</li>
        </ul>
        
        
        <b>Order-specific Requirements</b>
        <ul><li>order_id --> ```"9e5qr4dd-3369-431d-81f5-dff911e1c4e7"```</li>
        <li>timestamp --> ```1572189857```</li></ul>
        
        
        <b>Examples</b>
        
        
        Python
        
        
        ```python
        
        import hashlib
        
        import hmac
        
        import json
        
        import time
        
        from urllib.parse import urlencode
        
        import requests
                
        
        public_key = "your public key"
        
        private_key = bytearray("your private key", encoding="utf-8")
        
        
        order_headers = {"Content-Type": "application/json",
                        "X-Requested-With": "XMLHttpRequest",
                        "Authorization": public_api_key,
                        "Signature": None,
        }
        
        
        # Many requests require the current timestamp!
        
        timestamp = urlencode({"timestamp": int(time.time() * 1000)})
        
        
        # Setting order parameters
        
        # Note the use of separators for json.dumps
        
        order_id = "your order id"
        
        
        order_to_view = json.dumps({"order_id": order_id,
                      "timestamp": timestamp
        }, separators=(",", ":"))
        
        
        # Encrypting your private key set above along with your selected order parameters
        
        encrypted_private_key_and_order_to_view = hmac.new(
            private_api_key, order_to_view.encode("utf-8"), hashlib.sha256
        ).hexdigest()
        
        
        # Signing your API request
        
        order_headers["Signature"] = encrypted_private_key_and_order_to_view
        
        
        # Sending the request to the API!

        
        viewed_order = requests.post("https://trade.coss.io/c/api/v1" + "/order/details", headers=order_headers, payload=encrypted_private_key_and_order_to_view)
        
        
        print(viewed_order)  # JSON summary of your viewed order (200 response)
        
        ```
        
        
        Node JS
        
        
        ```js
        
        
        const request = require('superagent');

        const CryptoJS = require('crypto-js');
        
        const querystring = require('querystring');
        
        
        const public_api_key = "your public api key";
        
        
        const secret_api_key = "your private api key";
        
        
        var now = new Date().getTime()
        
        
        var query_params = {
            'order_id': "your order id",
            'recvWindow': 5000,
            'timestamp': now
        }
        
        
        var stringified_query_params = JSON.stringify(query_params)
        
        
        var sign = CryptoJS.HmacSHA256(stringified_query_params, secret_api_key).toString(CryptoJS.enc.Hex)
        
        
        let url = "https://trade.coss.io/c/api/v1/order/details";
        
        
        var req_headers = {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest',
            'Authorization': public_api_key,
            'Signature': sign,
        }
        
        async function make_request(url, headers, payload) {
            let response = await request.post(url).set(headers).send(payload)
            console.log(response.body) // for demonstration purposes
            return response.body;
        }
        
        
        make_request(url, req_headers, stringified_query_params)
        
        ```
      servers:
        - url: 'https://trade.coss.io/c/api/v1/'
      security:
        - APIKeyHeader: []
          APISignatureHeader: []
      responses:
        '200':
          description: 'Order Detail Response '
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400':
          description: Error Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderDetail'
        description: The order to retrieve the details
        required: true
  /order/trade-detail:
    post:
      tags:
        - Order management
      summary: Get order's trade details.
      description: >-
        Get details for a specific trade.
        
        
        Unparameterized URL: https://trade.coss.io/c/api/v1/order/trade-detail
        
        
        <b>General Requirements</b>
        <ul><li>Public Key in the <b>Authorization</b> header</li>
        <li>HMAC-256 encoded Private Key in the <b>Signature</b> header</li>
        <li>The current timestamp in the <b>timestamp</b> header</li>
        </ul>
        
        
        <b>Order-specific Requirements</b>
        <ul><li>order_id --> ```"9e5ae4pp-3352-401d-90f5-dff985e1c4e7"```</li>
        <li>timestamp --> ```1572189857```</li></ul>
        
        
        <b>Examples</b>
        
        
        Python
        
        
        ```python
        
        import hashlib
        
        import hmac
        
        import json
        
        import time
        
        from urllib.parse import urlencode
        
        import requests
                
        
        public_key = "your public key"
        
        private_key = bytearray("your private key", encoding="utf-8")
        
        
        order_headers = {"Content-Type": "application/json",
                        "X-Requested-With": "XMLHttpRequest",
                        "Authorization": public_api_key,
                        "Signature": None,
        }
        
        
        # Many requests require the current timestamp!
        
        timestamp = urlencode({"timestamp": int(time.time() * 1000)})
        
        
        # Setting order parameters
        
        # Note the use of separators for json.dumps
        
        trade_id = "your trade id"
        
        
        trade_to_view = json.dumps({"order_id": trade_id,
                      "timestamp": timestamp
        }, separators=(",", ":"))
        
        
        # Encrypting your private key set above along with your selected order parameters
        
        encrypted_private_key_and_trade_to_view = hmac.new(
            private_api_key, trade_to_view.encode("utf-8"), hashlib.sha256
        ).hexdigest()
        
        
        # Signing your API request
        
        order_headers["Signature"] = encrypted_private_key_and_trade_to_view
        
        
        # Sending the request to the API!

        
        viewed_trade = requests.post("https://trade.coss.io/c/api/v1" + "/trade-detail", headers=order_headers, payload=encrypted_private_key_and_trade_to_view)
        
        
        print(viewed_trade)  # JSON summary of your viewed trade (200 response)
        
        ```
        
        
        Node JS
        
        
        ```js
        
        
        const request = require('superagent');

        const CryptoJS = require('crypto-js');
        
        const querystring = require('querystring');
        
        
        const public_api_key = "your public api key";
        
        
        const secret_api_key = "your private api key";
        
        
        var now = new Date().getTime()
        
        
        var query_params = {
            'order_id': "your trade id",
            'recvWindow': 5000,
            'timestamp': now
        }
        
        
        var stringified_query_params = JSON.stringify(query_params)
        
        
        var sign = CryptoJS.HmacSHA256(stringified_query_params, secret_api_key).toString(CryptoJS.enc.Hex)
        
        
        let url = "https://trade.coss.io/c/api/v1/order/trade-detail";
        
        
        var req_headers = {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest',
            'Authorization': public_api_key,
            'Signature': sign,
        }
        
        async function make_request(url, headers, payload) {
            let response = await request.post(url).set(headers).send(payload)
            console.log(response.body) // for demonstration purposes
            return response.body;
        }
        
        
        make_request(url, req_headers, stringified_query_params)
        
        ```
      servers:
        - url: 'https://trade.coss.io/c/api/v1/'
      security:
        - APIKeyHeader: []
          APISignatureHeader: []
      responses:
        '200':
          description: 'Trade Detail Response '
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TradeDetailsArray'
        '400':
          description: Error Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TradeDetailRequest'
        description: The order to retrieve the trade details
        required: true
  /order/list/open:
    post:
      tags:
        - Order management
      summary: Get a list of your current open orders.
      description: >-
        Get current open and cancelling orders for a specific symbol. 
        
        
        URL: https://trade.coss.io/c/api/v1/order/list/open
        
        
        <b>General Requirements</b>
        <ul><li>Public Key in the <b>Authorization</b> header</li>
        <li>HMAC-256 encoded Private Key in the <b>Signature</b> header</li>
        <li>The current timestamp in the <b>timestamp</b> header</li>
        </ul>
        
        
        <b>Order-specific Requirements</b>
        <ul><li>limit --> ```10```</li>
            <li>page --> ```2```</li>
            <li>symbol --> ```"ETH_BTC"```</li>
            <li>timestamp --> ```1572189857```</li>
        </ul>
        
        
        <b>Examples</b>
        
        
        Python
        
        
        ```python
        
        import hashlib
        
        import hmac
        
        import json
        
        import time
        
        from urllib.parse import urlencode
        
        import requests
                
        
        public_key = "your public key"
        
        private_key = bytearray("your private key", encoding="utf-8")
        
        
        order_headers = {"Content-Type": "application/json",
                        "X-Requested-With": "XMLHttpRequest",
                        "Authorization": public_api_key,
                        "Signature": None,
        }
        
        
        # Many requests require the current timestamp!
        
        timestamp = urlencode({"timestamp": int(time.time() * 1000)})
        
        
        # Setting request parameters
        
        # Note the use of separators for json.dumps
        
        limit = 10
        page = 1
        symbol = "ETH_BTC"
        
        
        open_orders = json.dumps({"symbol": symbol,
                      "limit": limit,
                      "page": page,
                      "timestamp": timestamp
        }, separators=(",", ":"))
        
        
        # Encrypting your private key set above along with your current open orders
        
        encrypted_private_key_and_open_orders = hmac.new(
            private_api_key, open_orders.encode("utf-8"), hashlib.sha256
        ).hexdigest()
        
        
        # Signing your API request
        
        order_headers["Signature"] = encrypted_private_key_and_open_orders
        
        
        # Sending the request to the API!

        
        open_orders = requests.post("https://trade.coss.io/c/api/v1" + "/order/list/open", headers=order_headers, payload=encrypted_private_key_and_open_orders)
        
        
        print(open_orders)  # JSON summary of your open orders (200 response)
        
        ```
        
        
        Node JS
        
        
        ```js
        
        const request = require('superagent');

        const CryptoJS = require('crypto-js');
        
        const querystring = require('querystring');
        
        
        const public_api_key = "your public api key";
        
        
        const secret_api_key = "your private api key";
        
        
        var now = new Date().getTime()
        
        
        var query_params = {
            'symbol': "ETH_BTC",
            'limit': 10,
            'recvWindow': 5000,
            'timestamp': now
        }
        
        
        var stringified_query_params = JSON.stringify(query_params)
        
        
        var sign = CryptoJS.HmacSHA256(stringified_query_params, secret_api_key).toString(CryptoJS.enc.Hex)
        
        
        let url = "https://trade.coss.io/c/api/v1/order/list/open";
        
        
        var req_headers = {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest',
            'Authorization': public_api_key,
            'Signature': sign,
        }
        
        async function make_request(url, headers, payload) {
            let response = await request.post(url).set(headers).send(payload)
            console.log(response.body) // for demonstration purposes
            return response.body;
        }
        
        
        make_request(url, req_headers, stringified_query_params)
        
        ```
      servers:
        - url: 'https://trade.coss.io/c/api/v1/'
      security:
        - APIKeyHeader: []
          APISignatureHeader: []
      responses:
        '200':
          description: 'Order Detail Response '
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderListResponse'
        '400':
          description: Error Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        $ref: '#/components/requestBodies/OrderListRequest'
  /order/list/completed:
    post:
      tags:
        - Order management
      summary: Get the list of completed orders for user.
      description: >-
        Get completed orders for specific symbol where order status is FILLED,
        PARTIAL_FILL, or CANCELED.
        
        
        Unparameterized URL: https://trade.coss.io/c/api/v1/order/list/completed
        
                
        <b>General Requirements</b>
        <ul><li>Public Key in the <b>Authorization</b> header</li>
        <li>HMAC-256 encoded Private Key in the <b>Signature</b> header</li>
        <li>The current timestamp in the <b>timestamp</b> header</li>
        </ul>
        
        
        <b>Order-specific Requirements</b>
        <ul><li>limit --> ```10```</li>
            <li>page --> ```2```</li>
            <li>symbol --> ```"ETH_BTC"```</li>
            <li>timestamp --> ```1572189857```</li>
        </ul>
        
        
        <b>Examples</b>
        
        
        Python
        
        
        ```python
        
        import hashlib
        
        import hmac
        
        import json
        
        import time
        
        from urllib.parse import urlencode
        
        import requests
                
        
        public_key = "your public key"
        
        private_key = bytearray("your private key", encoding="utf-8")
        
        
        order_headers = {"Content-Type": "application/json",
                        "X-Requested-With": "XMLHttpRequest",
                        "Authorization": public_api_key,
                        "Signature": None,
        }
        
        
        # Many requests require the current timestamp!
        
        timestamp = urlencode({"timestamp": int(time.time() * 1000)})
        
        
        # Setting request parameters
        
        # Note the use of separators for json.dumps
        
        limit = 10
        
        page = 0
        
        symbol = "ETH_BTC"
        
        
        completed_orders = json.dumps({"symbol": symbol,
                      "limit": limit,
                      "page": page,
                      "timestamp": timestamp
        }, separators=(",", ":"))
        
        
        # Encrypting your private key set above along with your current open orders
        
        encrypted_private_key_and_completed_orders = hmac.new(
            private_api_key, completed_orders.encode("utf-8"), hashlib.sha256
        ).hexdigest()
        
        
        # Signing your API request
        
        order_headers["Signature"] = encrypted_private_key_and_completed_orders
        
        
        # Sending the request to the API!

        
        completed_orders = requests.post("https://trade.coss.io/c/api/v1" + "/order/list/completed", headers=order_headers, payload=encrypted_private_key_and_completed_orders)
        
        
        print(completed_orders)  # JSON summary of your completed orders (200 response)
        
        ```
        
        
        Node JS
        
        
        ```js
        
        
        const request = require('superagent');

        const CryptoJS = require('crypto-js');
        
        const querystring = require('querystring');
        
        
        const public_api_key = "your public api key";
        
        
        const secret_api_key = "your secret api key";
        
        
        var now = new Date().getTime()
        
        
        var query_params = {
            'symbol': "ETH_BTC",
            'limit': 10,
            'recvWindow': 5000,
            'timestamp': now
        }
        
        
        var stringified_query_params = JSON.stringify(query_params)
        
        
        var sign = CryptoJS.HmacSHA256(stringified_query_params, secret_api_key).toString(CryptoJS.enc.Hex)
        
        
        let url = "https://trade.coss.io/c/api/v1/order/list/completed";
        
        
        var req_headers = {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest',
            'Authorization': public_api_key,
            'Signature': sign,
        }
        
        async function make_request(url, headers, payload) {
            let response = await request.post(url).set(headers).send(payload)
            console.log(response.body) // for demonstration purposes
            return response.body;
        }
        
        
        make_request(url, req_headers, stringified_query_params)
        
        ```
      servers:
        - url: 'https://trade.coss.io/c/api/v1/'
      security:
        - APIKeyHeader: []
          APISignatureHeader: []
      responses:
        '200':
          description: 'Order Detail Response '
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderListResponse'
        '400':
          description: Error Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        $ref: '#/components/requestBodies/OrderListRequest'
  /order/list/all:
    post:
      tags:
        - Order management
      summary: Get the list of all orders for user.
      description: >-
        Get the list of all of your orders for the specified symbol. The default and maximum number of
        orders to fetch is 50.
        
        
        URL: https://trade.coss.io/c/api/v1/order/list/all
        
                
        <b>General Requirements</b>
        <ul><li>Public Key in the <b>Authorization</b> header</li>
        <li>HMAC-256 encoded Private Key in the <b>Signature</b> header</li>
        <li>The current timestamp in the <b>timestamp</b> header</li>
        </ul>
        
        
        <b>Order-specific Requirements</b>
        <ul><li>limit --> ```50```</li>
            <li>symbol --> ```"ETH_BTC"```</li>
            <li>timestamp --> ```1572189857```</li>
        </ul>
        
        
        <b>Examples</b>
        
        
        Python
        
        
        ```python
        
        import hashlib
        
        import hmac
        
        import json
        
        import time
        
        from urllib.parse import urlencode
        
        import requests
                
        
        public_key = "your public key"
        
        private_key = bytearray("your private key", encoding="utf-8")
        
        
        order_headers = {"Content-Type": "application/json",
                        "X-Requested-With": "XMLHttpRequest",
                        "Authorization": public_api_key,
                        "Signature": None,
        }
        
        
        # Many requests require the current timestamp!
        
        timestamp = urlencode({"timestamp": int(time.time() * 1000)})
        
        
        # Setting request parameters
        
        # Note the use of separators for json.dumps
        
        limit = 50
        
        symbol = "ETH_BTC"
        
        
        all_eth_btc_orders = json.dumps({"symbol": symbol,
                      "limit": limit,
                      "timestamp": timestamp
        }, separators=(",", ":"))
        
        
        # Encrypting your private key set above along with your current open orders
        
        encrypted_private_key_and_all_eth_btc_orders = hmac.new(
            private_api_key, open_orders.encode("utf-8"), hashlib.sha256
        ).hexdigest()
        
        
        # Signing your API request
        
        order_headers["Signature"] = encrypted_private_key_and_all_eth_btc_orders
        
        
        # Sending the request to the API! Note the use of the data field for this request.

        
        all_eth_btc_orders = requests.post("https://trade.coss.io/c/api/v1" + "/order/list/all", headers=order_headers, data=encrypted_private_key_and_all_eth_btc_orders)
        
        
        print(all_eth_btc_orders)  # JSON summary of all of your ETH_BTC orders up to 50 orders
        
        ```
        
        
        Node JS
        
        
        ```js
        
        const request = require('superagent');
        
        const CryptoJS = require('crypto-js');
        
        const querystring = require('querystring');
        
        
        const public_api_key = "your public api key";
        
        
        const secret_api_key = "your secret api key";
        
        
        var now = new Date().getTime()
        
        
        var query_params = {
            'symbol': "ETH_BTC",
            'from_id': null,
            'limit': 50,
            'recvWindow': 5000,
            'timestamp': now
        }
        
        
        var stringified_query_params = JSON.stringify(query_params)
        
        
        var sign = CryptoJS.HmacSHA256(stringified_query_params, secret_api_key).toString(CryptoJS.enc.Hex)
        
        
        let url = "https://trade.coss.io/c/api/v1/order/list/all";
        
        
        var req_headers = {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest',
            'Authorization': public_api_key,
            'Signature': sign,
        }
        
        async function make_request(url, headers, payload) {
            let response = await request.post(url).set(headers).send(payload)
            console.log(response.body) // for demonstration purposes
            return response.body;
        }
        
        
        make_request(url, req_headers, stringified_query_params)
        
        ```
      servers:
        - url: 'https://trade.coss.io/c/api/v1/'
      security:
        - APIKeyHeader: []
          APISignatureHeader: []
      responses:
        '200':
          description: 'Order Detail Response '
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderAllResponse'
        '400':
          description: Error Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderAllRequest'
        description: >-
          The order request for retrieving all orders. This API requires
          signing.
        required: true
externalDocs:
  description: Find out more about Coss
  url: 'https://coss.io'
servers:
  - url: 'https://engine.coss.io/api/v1/'
  - url: 'https://trade.coss.io/c/api/v1/'
  - url: 'wss://engine.coss.io/ws/v1/'
components:
  requestBodies:
    OrderListRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OrderListRequest'
      description: The order request for retrieving open orders. This API requires signing.
      required: true
  securitySchemes:
    APIKeyHeader:
      type: apiKey
      in: header
      name: Authorisation
      description: >- 
        The public key to be provided by user in the Authorization header in your request.
        
        ```python
        
        order_headers = {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        "Authorization": "your public API key here",
        "Signature": None,
        }
        ```
    APISignatureHeader:
      type: apiKey
      in: header
      name: Signature
      description: >-
        The hmac256 signed payload provided by user in Signature header using
        their private key.
        
        You can sign your key in a variety of ways. Example function:
        
        
        ```python
        
        import hashlib
        import hmac
        
        def sign(private_key, payload):
          """
          Authorises payload requests to the API.
          :param payload: JSON  str
          :return: hmac encoded string for API authorization
          """
          return hmac.new(private_key, payload.encode("utf8"), hashlib.sha256).hexdigest()
        
        ```
        
  schemas:
    MarketPrice:
      type: object
      properties:
        symbol:
          type: string
          format: string
          example: ETH_BTC
        price:
          type: string
          format: string
          example: '0.01234567'
        updated_time:
          type: integer
          format: int64
          example: 1538116102137
    MarketPriceArray:
      type: array
      items:
        $ref: '#/components/schemas/MarketPrice'
    AccountBalance:
      type: object
      properties:
        currency_code:
          type: string
          format: string
          example: ETH_BTC
        address:
          type: string
          format: string
          example: 2MxctvXExQofAVqakPfBjKqVipfwTqwyQyF
        total:
          type: string
          format: string
          example: 1000.00275
        available:
          type: string
          format: string
          example: 994.5022
        in_order:
          type: string
          format: string
          example: 5.50055
    AccountBalanceArray:
      type: array
      items:
        $ref: '#/components/schemas/AccountBalance'
    AccountDetails:
      type: object
      properties:
        account_id:
          type: string
          format: string
          example: 3c05d5f4-41da-4c84-a167-XXXXXXXXX
        email:
          type: string
          format: string
          example: xyz@email.com
        phone:
          type: string
          format: string
          example: 12345678
        enable_google_2fa:
          type: boolean
          format: boolean
          example: true
        status:
          type: string
          format: string
          example: offline
        create_at:
          type: integer
          format: int64
          example: 1533546246091
        nick_name:
          type: string
          format: string
          example: Nick name
        chat_id:
          type: string
          format: string
          example: XXX@coss.io
        chat_password:
          type: string
          format: string
          example: XXXXXx
        country:
          type: string
          format: string
          example: US
        language:
          type: string
          format: string
          example: EN
        kyc_status:
          type: string
          format: string
        kyc_level:
          type: string
          format: string
          example: level1
        last_login_history:
          type: object
          properties:
            id:
              type: object
              properties:
                timestamp:
                  type: integer
                  format: int64
                  example: 1528199468
                machineIdentifier:
                  type: integer
                  format: int
                  example: 819034
                processIdentifier:
                  type: integer
                  format: int
                  example: 10145
                counter:
                  type: integer
                  format: int
                  example: 6683435
                time:
                  type: integer
                  format: int64
                  example: 1528199468000
                date:
                  type: integer
                  format: int64
                  example: 1528199468000
                timeSecond:
                  type: integer
                  format: int64
                  example: 1528199468
            account_id:
              type: string
              format: string
              example: 3c05d5f4-41da-4c84-a167-XXXXXXXXX
            nick_name:
              type: string
              format: string
              example: 'Nickname '
            email:
              type: string
              format: string
              example: 'abc@email.com '
            ip_address:
              type: string
              format: string
              example: 172.18.0.6
            login_at:
              type: integer
              format: int64
              example: 1540278841682
            os_name:
              type: string
              format: string
              example: Mac OS X
            browser_name:
              type: string
              format: string
              example: Country
            country:
              type: string
              format: string
              example: SG
            city:
              type: string
              format: string
              example: SG
            sentEmail:
              type: boolean
              example: false
        commission_status:
          type: boolean
          example: false
        allow_order:
          type: integer
          format: int
          example: 1
        disable_withdraw:
          type: integer
          format: int
          example: 0
        referral_id:
          type: string
          format: string
          example: XXXXX
        chat_server:
          type: string
          format: string
        exchange_fee:
          type: object
          properties:
            standard_fee:
              type: string
              format: string
              example: 0.2
    Depth:
      type: object
      properties:
        symbol:
          type: string
          format: string
          example: COSS_ETH
        limit:
          type: integer
          format: int32
          example: 10
        asks:
          type: array
          items:
            type: string
            example:
              - '0.12345678'
              - '0.00234567'
        bids:
          type: array
          items:
            type: string
            example:
              - '0.12345678'
              - '0.00234567'
        time:
          type: integer
          format: int64
          example: 1538114348750
    Order:
      type: object
      properties:
        order_symbol:
          type: string
          format: string
          example: ETH_BTC
        order_price:
          type: string
          format: string
          example: '1.00234567'
        stop_price:
          type: string
          format: string
          example: '1.00234555'
        order_side:
          type: string
          description: Order side (BUY or SELL)
          enum:
            - BUY
            - SELL
          example: BUY
        order_size:
          type: string
          format: string
          example: '1000'
        type:
          type: string
          description: 'order type (e.g. limit) '
          enum:
            - market
            - limit
          example: limit
        timestamp:
          type: integer
          format: int64
          example: 1538114348750
        recvWindow:
          type: integer
          format: int32
          example: 5000
      required:
        - order_symbol
        - order_price
        - order_side
        - order_size
        - type
        - timestamp
    OrderDetail:
      type: object
      properties:
        order_id:
          type: string
          format: string
          example: 9e5ae4dd-3369-401d-81f5-dff985e1cxyz
        timestamp:
          type: integer
          format: int64
          example: 1538114348750
        recvWindow:
          type: integer
          format: int64
          example: 5000
      required:
        - order_id
        - timestamp
    OrderResponse:
      type: object
      properties:
        order_id:
          type: string
          format: string
          example: 9e5ae4dd-3369-401d-81f5-dff985e1c4ty
        account_id:
          type: string
          format: string
          example: 9e5ae4dd-3369-401d-81f5-dff985e1c4a6
        order_symbol:
          type: string
          format: string
          example: ETH_BTC
        order_side:
          type: string
          format: string
          example: BUY
        status:
          type: string
          format: string
          enum:
            - OPEN
            - CANCELLED
            - FILLED
            - PARTIAL_FILL
            - CANCELLING
          example: OPEN
        createTime:
          type: integer
          format: int64
          example: 1538114348750
        type:
          type: string
          format: string
          example: limit
        order_price:
          type: string
          format: string
          example: '0.12345678'
        order_size:
          type: string
          format: string
          example: '10.12345678'
        executed:
          type: string
          format: string
          example: '0'
        stop_price:
          type: string
          format: string
          example: 02.12345678
        avg:
          type: string
          format: string
          example: '1.12345678'
        total:
          type: string
          format: string
          example: '2.12345678'
    CancelOrder:
      type: object
      properties:
        order_id:
          type: string
          format: string
          example: 9e5ae4dd-3369-401d-81f5-dff985e1c4e7
        order_symbol:
          type: string
          format: string
          example: ETH_BTC
        timestamp:
          type: integer
          format: int64
          example: 1538114348750
        recvWindow:
          type: integer
          format: int64
          example: 5000
      required:
        - order_id
        - order_symbol
        - timestamp
    CancelOrderResponse:
      type: object
      properties:
        order_id:
          type: string
          format: string
          example: 9e5ae4dd-3369-401d-81f5-dff985e1c4x7
        order_symbol:
          type: string
          format: string
          example: ETH_BTC
    OrderListRequest:
      type: object
      properties:
        limit:
          type: integer
          format: int32
          example: 10
        page:
          type: integer
          format: int32
          example: 0
        symbol:
          type: string
          format: string
          example: ETH_BTC
        timestamp:
          type: integer
          format: int64
          example: 1429514463299
        recvWindow:
          type: integer
          format: int32
          example: 5000
      required:
        - symbol
        - timestamp
    OrderListResponse:
      type: object
      properties:
        total:
          type: integer
          format: int32
          example: 2
        list:
          type: array
          items:
            $ref: '#/components/schemas/OrderResponse'
    OrderAllRequest:
      type: object
      properties:
        symbol:
          type: string
          format: string
          example: ETH_BTC
        from_id:
          type: string
          format: string
          example: order id to fetch from
        limit:
          type: integer
          format: int32
          example: default and maximum is 50
        timestamp:
          type: integer
          format: int64
          example: 1530682938651
        recvWindow:
          type: integer
          format: int32
          example: 5000
      required:
        - symbol
        - timestamp
    OrderAllResponse:
      type: array
      items:
        $ref: '#/components/schemas/OrderResponse'
    RateLimit:
      type: object
      properties:
        type:
          type: string
          format: string
          example: REQUESTS
        interval:
          type: string
          format: string
          example: MINUTE
        limit:
          type: integer
          format: int32
          example: 60
    BaseCurrency:
      type: object
      properties:
        currency_code:
          type: string
          format: string
          example: COSS
        minimum_total_order:
          type: string
          format: string
          example: 100
    Coin:
      type: object
      properties:
        currency_code:
          type: string
          format: string
          example: USDT
        name:
          type: string
          format: string
          example: Tether
        minimum_order_amount:
          type: string
          format: string
          example: 1
    Symbol:
      type: object
      properties:
        symbol:
          type: string
          format: string
          example: COSS_ETH
        amount_limit_decimal:
          type: integer
          format: int32
          example: 0
        price_limit_decimal:
          type: integer
          format: int32
          example: 8
        allow_trading:
          type: boolean
          format: boolean
          example: true
    ExchangeInfo:
      type: object
      properties:
        timezone:
          type: string
          format: string
          example: UTC
        server_time:
          type: integer
          format: int64
          example: 1530683054384
        rate_limits:
          type: array
          items:
            $ref: '#/components/schemas/RateLimit'
        base_currencies:
          type: array
          items:
            $ref: '#/components/schemas/BaseCurrency'
        coins:
          type: array
          items:
            $ref: '#/components/schemas/Coin'
        symbols:
          type: array
          items:
            $ref: '#/components/schemas/Symbol'
    MarketSummariesResponse:
      type: object
      properties:
        success:
          type: string
          format: string
          example: true
        message:
          type: string
          format: string
          example: null
        result:
          type: array
          items:
            $ref: '#/components/schemas/MarketSummary'
        volumes:
          type: array
          items:
            $ref: '#/components/schemas/CoinVolume'
        t:
          type: integer
          format: int64
          example: 1531208813959
    MarketSummary:
      type: object
      properties:
        MarketName:
          type: string
          format: string
          example: ETH_BTC
        High:
          type: integer
          format: int64
          example: 0.00018348
        Low:
          type: integer
          format: int64
          example: 0.00015765
        BaseVolume:
          type: integer
          format: int64
          example: 240.82775523
        Last:
          type: integer
          format: int64
          example: 0.00017166
        TimeStamp:
          type: string
          format: string
          example: '02018-07-10T07:46:47.958Z'
        Volume:
          type: integer
          format: int64
          example: 1426236.4862518935
        Bid:
          type: string
          format: string
          example: 14262360.00017663
        Ask:
          type: string
          format: string
          example: 0.00017001
        PrevDay:
          type: integer
          format: int64
          example: 0.00017166
    CoinVolume:
      type: object
      properties:
        CoinName:
          type: string
          format: string
          example: BTC
        Volume:
          type: integer
          format: int64
          example: 571.64749041
    TradeHistoryResponse:
      type: object
      properties:
        symbol:
          type: string
          format: string
          example: ETH_BTC
        limit:
          type: integer
          format: int
          example: 100
          description: max number of records in array
        history:
          type: array
          items:
            $ref: '#/components/schemas/TradeHistory'
        time:
          type: integer
          format: int64
          example: 1529298130192
    TradeHistory:
      type: object
      properties:
        id:
          type: string
          format: string
          example: 139638
        price:
          type: string
          format: string
          example: '0.00001723'
        qty:
          type: string
          format: string
          example: '81.00000000'
        isBuyerMaker:
          type: boolean
          example: false
        time:
          type: integer
          format: int64
          example: 1529262196270
    ServerStatusInfo:
      type: object
      properties:
        result:
          type: boolean
          example: true
    ServerTimeInfo:
      type: object
      properties:
        server_time:
          type: integer
          format: int64
          example: 1545196121361
    TradeDetailRequest:
      type: object
      properties:
        order_id:
          type: string
          format: string
          example: 08098534-ae65-452e-9a84-5b79a5160b5g
        timestamp:
          type: integer
          format: int64
          example: 1545196121361
        recvWindow:
          type: integer
          format: int
          example: 5000
    TradeDetail:
      type: object
      properties:
        hex_id:
          type: string
          format: string
          example: 6e34eb38892faf4c3528ab89
        symbol:
          type: string
          format: string
          example: COSS_ETH
        order_id:
          type: string
          format: string
          example: 08098534-ae65-452e-9a84-5b79a5160b5g
        order_side:
          type: string
          format: string
          example: BUY
        price:
          type: string
          format: string
          example: '0.00064600'
        quantity:
          type: string
          format: string
          example: '10'
        fee:
          type: string
          format: string
          example: 0.00700000 COSS
        total:
          type: string
          format: string
          example: 0.00646000 ETH
        timestamp:
          type: integer
          format: int64
          example: 1545196121361
    TradeDetailsArray:
      type: array
      items:
        $ref: '#/components/schemas/TradeDetail'
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          format: string
          example: '400'
        error_description:
          type: string
          format: string
          example: INVALID_DATA